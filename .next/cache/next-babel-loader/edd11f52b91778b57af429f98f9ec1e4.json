{"ast":null,"code":"import { applyMiddleware, createStore, compose } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport { createWrapper } from 'next-redux-wrapper';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport reducer from '../reducers';\nimport rootSaga from '../sagas';\n\nvar configureStore = function configureStore(context) {\n  var sagaMiddleware = createSagaMiddleware();\n  var middlewares = [sagaMiddleware];\n  var enhancer = false ? compose(applyMiddleware.apply(void 0, middlewares)) : composeWithDevTools(applyMiddleware.apply(void 0, middlewares));\n  var store = createStore(reducer, enhancer);\n  store.sagaTask = sagaMiddleware.run(rootSaga);\n  return store;\n};\n\nvar wrapper = createWrapper(configureStore, {\n  debug: true\n});\nexport default wrapper;","map":{"version":3,"sources":["/Users/anjoy/connected/react-web/store/configureStore.js"],"names":["applyMiddleware","createStore","compose","createSagaMiddleware","createWrapper","composeWithDevTools","reducer","rootSaga","configureStore","context","sagaMiddleware","middlewares","enhancer","store","sagaTask","run","wrapper","debug"],"mappings":"AAAA,SAASA,eAAT,EAA0BC,WAA1B,EAAuCC,OAAvC,QAAsD,OAAtD;AACA,OAAOC,oBAAP,MAAiC,YAAjC;AACA,SAASC,aAAT,QAA8B,oBAA9B;AACA,SAASC,mBAAT,QAAoC,0BAApC;AAEA,OAAOC,OAAP,MAAoB,aAApB;AACA,OAAOC,QAAP,MAAqB,UAArB;;AAEA,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAACC,OAAD,EAAa;AACnC,MAAMC,cAAc,GAAGP,oBAAoB,EAA3C;AACA,MAAMQ,WAAW,GAAG,CAACD,cAAD,CAApB;AACA,MAAME,QAAQ,GAAG,QACdV,OAAO,CAACF,eAAe,MAAf,SAAmBW,WAAnB,CAAD,CADO,GAEdN,mBAAmB,CACpBL,eAAe,MAAf,SAAmBW,WAAnB,CADoB,CAFtB;AAKA,MAAME,KAAK,GAAGZ,WAAW,CAACK,OAAD,EAAUM,QAAV,CAAzB;AACAC,EAAAA,KAAK,CAACC,QAAN,GAAiBJ,cAAc,CAACK,GAAf,CAAmBR,QAAnB,CAAjB;AACA,SAAOM,KAAP;AACA,CAXD;;AAaA,IAAMG,OAAO,GAAGZ,aAAa,CAACI,cAAD,EAAiB;AAAES,EAAAA,KAAK;AAAP,CAAjB,CAA7B;AAEA,eAAeD,OAAf","sourcesContent":["import { applyMiddleware, createStore, compose } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport { createWrapper } from 'next-redux-wrapper';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\nimport reducer from '../reducers';\nimport rootSaga from '../sagas';\n\nconst configureStore = (context) => {\n\tconst sagaMiddleware = createSagaMiddleware();\n\tconst middlewares = [sagaMiddleware];\n\tconst enhancer = process.env.NODE_ENV === 'production'\n\t\t? compose(applyMiddleware(...middlewares))\n\t\t: composeWithDevTools(\n\t\t\tapplyMiddleware(...middlewares),\n\t\t);\n\tconst store = createStore(reducer, enhancer);\n\tstore.sagaTask = sagaMiddleware.run(rootSaga);\n\treturn store;\n};\n\nconst wrapper = createWrapper(configureStore, { debug: process.env.NODE_ENV === 'development' });\n\nexport default wrapper;\n"]},"metadata":{},"sourceType":"module"}